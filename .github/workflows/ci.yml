name: Build and Release

"on":
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # 1) Code auschecken
      - name: Check out code
        uses: actions/checkout@v4

      # 2) Node-Version festlegen
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # 3) Dependencies installieren
      - name: Install dependencies
        run: npm ci

      # 4) Linting & Code Quality
      - name: Lint code
        run: npm run lint

      - name: Check code formatting
        run: npm run format:check

      # 5) Next.js (Test) Build
      - name: Build & Test
        run: |
          npm run build

      # 6) Semantic Release ausführen (nur auf main branch)
      #
      #    - Wir lassen Semantic Release laufen und leiten die Ausgabe in eine Log-Datei um.
      #    - Anschließend suchen wir in diesem Log nach der Version und geben sie als Output aus.
      #    - Wenn keine neue Version veröffentlicht wird, bricht Semantic Release mit Code 0 ab,
      #      wir setzen dann "version" leer und überspringen das Docker-Build später.
      # > sr.log 2>&1 || true
      - name: Semantic Release
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: semantic_release
        run: |
          # Führe semantic-release aus und speichere die Log-Ausgabe
          npx semantic-release --debug
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Im nächsten Schritt die Variable verwenden (nur auf main branch)
      - name: Check semantic-release version
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: check_version
        run: |
          echo "SEMANTIC_RELEASE_VERSION: $SEMANTIC_RELEASE_VERSION"
          if [ -z "$SEMANTIC_RELEASE_VERSION" ]; then
            echo "No new release created."
            echo "version=" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "New release version: $SEMANTIC_RELEASE_VERSION"
            echo "version=$SEMANTIC_RELEASE_VERSION" >> $GITHUB_OUTPUT
          fi

      # 7) Docker-Login (nur bei neuem Release)
      - name: Log in to Docker registry
        if: ${{ steps.check_version.outputs.version != '' }}
        uses: docker/login-action@v3.5.0
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 8) pack CLI installieren
      - name: Install pack CLI
        if: ${{ steps.check_version.outputs.version != '' }}
        run: |
          curl -sSL "https://github.com/buildpacks/pack/releases/download/v0.37.0/pack-v0.37.0-linux.tgz" \
          | sudo tar -xvz -C /usr/local/bin


      # 9) Build Image mit Semantic-Release-Version
      - name: Build Docker image
        if: ${{ steps.check_version.outputs.version != '' }}
        run: |
          docker build \
            --build-arg NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL }} \
            --build-arg NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }} \
            -t docker.io/darthkali/gute-schule-jetzt:${{ steps.check_version.outputs.version }} \
            .

      # 10) Push Image mit Semantic-Release-Version
      - name: Push Docker image
        if: ${{ steps.check_version.outputs.version != '' }}
        run: docker push docker.io/darthkali/gute-schule-jetzt:${{ steps.check_version.outputs.version }}
